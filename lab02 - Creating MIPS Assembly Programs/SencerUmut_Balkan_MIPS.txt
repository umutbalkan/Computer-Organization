{\rtf1\ansi\ansicpg1252\cocoartf1504
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;\csgray\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # Sencer Umut Balkan - 21401911\
# CS 224 - Section 3 / LAB02\
# characterPattern.asm\
# Computes the number of non over-lapping repetitions of a character pattern in a character string.\
\
\
#########################################\
##############	MACROS   ################\
#########################################\
        # system call "exit" operation	\
	.macro 	done\
	li 	$v0,10\
	syscall\
        .end_macro\
        \
        # ------------------\
        # string print operation\
	.macro 	print(%str)\
	.data\
	myLabel: .asciiz %str\
	.text\
	li 	$v0, 4\
	la 	$a0, myLabel\
	syscall\
	.end_macro\
	\
	# ------------------\
	# integer print operation\
	.macro print_int (%x)\
	li $v0, 1\
	add $a0, $zero, %x\
	syscall\
	.end_macro\
#########################################\
#########################################\
#########################################\
\
	\
			\
           .data       # variable declarations follow this line\
	myWord:		.space	20\
	charPattern:	.space	6\
	endline:	.byte	'\\n'																\
           .text       # instructions follow this line                         											\
main:\
	print("Hello! Please enter the string: ")	#macro\
	la 	$a0, myWord	# read the character string from user.\
	li 	$a1, 10		# string max size 15 characters\
	li 	$v0, 8		# syscall code for read string from console\
	syscall\
	\
	print ("Good...\\nNow please enter the character pattern: ")	#macro\
	la	$a0, charPattern	# read the character string from user.\
	li	$a1, 6			# string max size 5 characters\
	li	$v0, 8			# syscall code for read string from console\
	syscall\
	\
	\
	# Setting these registers to 0.\
	li	$t0, 0			# $t0 = i\
	lb	$t3, endline		# $t3 = '\\n'\
	li	$t4, 0			# $t4 = j\
	li	$t5, 0			# $t5 = number of patterns\
		# $t1 = charPattern[0]	\
\
sum:	\
	addi $t5, $t5, 1\
\
while1:	\
	lb	$t1, charPattern($t4)\
	lb	$t2, myWord($t0)\
	addi	$t0, $t0, 1 # i++\
	beq	$t1, $t2, while2\
	j	while1\
	while2:\
		addi	$t4, $t4, 1	# j++\
		beq	$t1, $zero, sum	\
	\
exit:\
	print_int($t5)\
	done	#macro\
\
#################\
\
# Sencer Umut Balkan - 21401911\
# CS 224 - Section 3 / LAB02\
# Translation.asm\
\
############# MACROS ##############\
###################################\
        # string print operation\
	.macro 	print(%str)\
	.data\
	myLabel: .asciiz %str\
	.text\
	li 	$v0, 4\
	la 	$a0, myLabel\
	syscall\
	.end_macro\
	\
	\
	# exit macro\
	.macro 	done\
	li 	$v0,10\
	syscall\
        .end_macro\
        \
###################################\
	\
	\
	\
\
	.data\
	original:	.space		10\
	code:		.space		10\
	decoded:	.byte		'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
	str:		.space		10\
	\
	.text\
	print("Enter original array: ") # macro\
	la 	$a0, original	# read the character string from user.\
	li 	$a1, 10		# string max size 10 characters\
	li 	$v0, 8		# syscall code for read string from console\
	syscall\
	\
	print("Great!\\nNow enter the coded array: ")	#macro\
	la 	$a0, code	# read the character string from user.\
	li 	$a1, 10		# string max size 10 characters\
	li 	$v0, 8		# syscall code for read string from console\
	syscall\
	\
	print("Enter the string: ")	#macro\
	la 	$a0, str	# read the character string from user.\
	li 	$a1, 10		# string max size 10 characters\
	li 	$v0, 8		# syscall code for read string from console\
	syscall\
	\
	\
computeSize:\
	li	$t7, 10\
	lb	$t1, original($t0)\
	subi	$t1, $t1, 97	# converting them to original alphabetical values\
	blt	$t1, $t7, encode\
	sb	$t1, original($t0)\
	addi 	$t0, $t0, 1\
	\
encode:\
	lb	$t1, original($t0)	# original[i]\
	lb	$t2, code($t0)		# code[i]\
	bge   	$t0, $t7, manipulateStr	# if (original[i] == '\\n\
	subi	$t1, $t1, 97\
	sb	$t2, decoded($t1)	# \
	addi	$t0, $t0, 1		# i++\
	j	encode\
	\
manipulateStr:\
	li	$t6, 10\
	lb	$t1, str($t5)\
	subi	$t1, $t1, 97\
	lb	$t2, decoded($t1)\
	sb	$t2, str($t5)\
	beq     $t5, $t6, exit  #str[i] > 0 continue loops\
	addi	$t5, $t5, 1	\
	j manipulateStr\
\
	\
exit:\
	li 	$v0, 4\
	la 	$a0, str\
	syscall\
	done	#macro\
	\
	\
\
}